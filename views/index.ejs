<!DOCTYPE html>
<html>

<head>
  <title>Training Data</title>
  <%- include('navbar'); %>
  <br><br>
    <script src="https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
  <div class="grid-container">
    <div class="parent">
      <div class="div1">
        <div class="chart-container">
          <canvas id="lossChart" width="200" height="200"></canvas>
        </div>
      </div>
      <div class="div2">
        <div class="chart-container">
          <canvas id="accuracyChart" width="200" height="200"></canvas>
        </div>
      </div>
      <div class="full-width">
        <div class="feedback-container">
          <div class="feedback-title">Training Feedback:</div>
          <div id="successMessage" style="display: none;"></div>
          <div id="feedbackMessage" class="feedback-message"></div>
          <br>
          <div id="modelSummary" class="model-summary" style="display: none;"></div>
          <div id="layerVisualization" class="layer-visualization" style="display: none;"></div>
        </div>
      </div>
      <div id="evaluationMetrics" class="evaluation-metrics" style="display: none; width: 100%; grid-column: 1 / -1;">
      </div>
    </div>
  </div>

  <script>
    function renderCharts(data) {
      let lossData = data.lossData;
      let accuracyData = data.accuracyData;
      let epochlength = data.epoch;
      let model = data.model;

      var ctxLoss = document.getElementById('lossChart').getContext('2d');
      var ctxAccuracy = document.getElementById('accuracyChart').getContext('2d');
      new Chart(ctxLoss, {
        type: 'line',
        data: {
          datasets: [{
            label: 'Loss',
            data: lossData || [],
            fill: false,
            borderColor: 'rgba(91, 239, 255)',
            backgroundColor: 'rgba(91, 239, 255)',
            borderWidth: 1
          }]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true,
              grid: {
                display: true,
                color: 'rgba(89, 80, 80, 0.72)' // Light grey grid
              },
              title: {
                display: true,
                text: 'Loss',
              },
            },
            x: {
              type: 'linear',
              min: 0,
              max: epochlength,
              grid: {
                display: true,
                color: 'rgba(89, 80, 80, 0.72)' // Light grey grid
              },
              title: {
                display: true,
                text: 'Epoch',
              },
            },
          },
          plugins: {
            legend: {
              display: false,
            },
            title: {
              display: false,
            },
          },
          layout: {
            backgroundColor: 'rgba(255, 255, 255, 1)', // White background
          },
        }
      });

      new Chart(ctxAccuracy, {
        type: 'line',
        data: {
          datasets: [{
            label: 'Accuracy',
            data: accuracyData || [],
            fill: false,
            borderColor: 'rgba(91, 239, 255)',
            backgroundColor: 'rgba(91, 239, 255)',
            borderWidth: 1
          }]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true,
              grid: {
                display: true,
                color: 'rgba(89, 80, 80, 0.72)' // Light grey grid
              },
              title: {
                display: true,
                text: 'Accuracy',
              },
            },
            x: {
              type: 'linear',
              min: 0,
              max: epochlength,
              grid: {
                display: true,
                color: 'rgba(89, 80, 80, 0.72)' // Light grey grid
              },
              title: {
                display: true,
                text: 'Epoch',
              },
            },
          },
          plugins: {
            legend: {
              display: false,
            },
            title: {
              display: false,
            },
          },
          layout: {
            backgroundColor: 'rgba(255, 255, 255, 1)', // White background
          },
        }
      });
      const feedbackMessage = document.getElementById('feedbackMessage');

      const recentLossData = lossData[lossData.length - 1].y;
      if (recentLossData <= 20) {
        feedbackMessage.innerHTML = `<span style="color: green;">AI training was successful!</span><br><br>`;
      } else {
        feedbackMessage.innerHTML = `<span style="color: red;">AI training was not satisfactory. Loss: ${recentLossData.toFixed(2)}</span><br><br>`;
      }

      const lastAccuracyData = accuracyData[accuracyData.length - 1].y;
      const goodAccuracy = lastAccuracyData >= 0.8 ? `Good (${lastAccuracyData.toFixed(2)})` : `Bad (${lastAccuracyData.toFixed(2)})`;

      feedbackMessage.innerHTML += `<strong>Accuracy:</strong> ${goodAccuracy}<br>`;
      feedbackMessage.innerHTML += `<strong>Training Time:</strong> ${formatTrainingTime(data.trainingTime * 100)}<br>`;
      feedbackMessage.innerHTML += `<strong>Epochs:</strong> ${data.epoch + 1}`;

      if (data.model) {
        const modelSummaryElement = document.getElementById('modelSummary');
        const layerVisualizationElement = document.getElementById('layerVisualization');
        const evaluationMetrics = document.getElementById('evaluationMetrics');

        modelSummaryElement.style.display = 'block';
        layerVisualizationElement.style.display = 'block';
        evaluationMetrics.style.display = 'block';

        const modelConfigHTML = (modelInfo) => {
          let tableRows = '';
          modelInfo.config.layers.forEach(layer => {
            let configRows = '';
            for (let property in layer.config) {
              let value = layer.config[property];
              if (typeof value === 'object' && value !== null) {
                let subRows = '';
                for (let subProp in value) {
                  subRows += `<tr><td>${subProp}</td><td>${JSON.stringify(value[subProp], null, 2)}</td></tr>`;
                }
                value = `<table>${subRows}</table>`;
              }
              configRows += `<tr><td>${property}</td><td>${value}</td></tr>`;
            }

            tableRows += `
                <tr>
                    <td>${layer.className}</td>
                    <td>
                        <table>
                            ${configRows}
                        </table>
                    </td>
                </tr>
            `;
          });

          return `
            <table>
                <thead>
                    <tr>
                        <th>Class Name</th>
                        <th>Config</th>
                    </tr>
                </thead>
                <tbody>
                    ${tableRows}
                </tbody>
            </table>
        `;
        };
        evaluationMetrics.innerHTML = `<div class="feedback-title">Model Config:</div>${modelConfigHTML(data.ModelInfo)}`;
      }

    }

    function formatTrainingTime(seconds) {
      if (seconds < 1) {
        return `${(seconds * 1000).toFixed(2)}ms`;
      } else if (seconds < 60) {
        return `${seconds.toFixed(2)}s`;
      } else if (seconds < 3600) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = (seconds % 60).toFixed(2);
        return `${minutes} min ${remainingSeconds}s`;
      } else if (seconds < 86400) {
        const hours = Math.floor(seconds / 3600);
        const remainingMinutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = (seconds % 60).toFixed(2);
        return `${hours}hr ${remainingMinutes}min ${remainingSeconds}s`;
      } else {
        const days = Math.floor(seconds / 86400);
        const remainingHours = Math.floor((seconds % 86400) / 3600);
        const remainingMinutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = (seconds % 60).toFixed(2);
        return `${days} day ${remainingHours}hr ${remainingMinutes}min ${remainingSeconds}s`;
      }
    }

    window.onload = async function () {
      try {
        const res = await axios.get('http://127.0.0.1:3001/data');
        const data = res.data;

        renderCharts(data);

        document.getElementById('successMessage').style.display = 'block';
      } catch (error) {
        document.getElementById('successMessage').innerText = 'Error: ' + error.message;
        document.getElementById('successMessage').style.display = 'block';
        console.error('Error fetching data:', error);
      }
    };
  </script>
  <style>
    body {
      background-color: #090d1e;
      color: #ffffff;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }

    th,
    td {
      border: 1px solid #ddd;
      padding: 8px;
    }

    th {
      background-color: #1d1f47;
    }

    td {
      background-color: #1d1f47;
      color: #ffffff;
      font-weight: bold;
    }

    tr:nth-child(even) {
      background-color: #242556;
    }

    tr:hover {
      background-color: #b8daff;
    }

    .container {
      margin-top: 50px;
    }

    .chart-container {
      width: 90%;
      float: left;
      padding: 20px;
    }

    .feedback-container {
      clear: both;
      padding: 10px 20px;
      border: 1px solid #ffffff;
      background-color: rgba(255, 255, 255, 0.1);
    }


    .feedback-title {
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 10px;
    }

    .feedback-message {
      font-size: 18px;
    }

    .grid-container {
      display: flex;
      justify-content: center;
      width: 100%;
    }

    .parent {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(2, 1fr);
      grid-column-gap: 0px;
      grid-row-gap: 0px;
      width: 100%;
      height: 100%;
    }

    .div1 {
      grid-area: 1 / 1 / 2 / 2;
    }

    .div2 {
      grid-area: 1 / 2 / 2 / 3;
    }

    .full-width {
      grid-area: 2 / 1 / 3 / 3;
    }
  </style>
</body>

</html>